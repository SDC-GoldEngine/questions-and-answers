const { Pool, Client } = require('pg');

module.exports = async () => {
  const client = new Client({
    database: 'template1',
  });

  try {
    await client.connect();
    await client.query(`DROP DATABASE IF EXISTS ${process.env.PGDATABASE};`)
    await client.query(`CREATE DATABASE ${process.env.PGDATABASE};`)
    await client.end()
    console.log(`Database ${process.env.PGDATABASE} created.`)

    const pool = new Pool()

    await pool.query(`
      CREATE TABLE IF NOT EXISTS questions(
        question_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        product_id integer NOT NULL,
        question_body text NOT NULL,
        question_date bigint,
        asker_name text NOT NULL,
        asker_email text NOT NULL,
        question_helpfulness integer DEFAULT 0,
        reported boolean DEFAULT FALSE
      );

      CREATE TABLE IF NOT EXISTS answers(
        id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        question_id integer NOT NULL REFERENCES questions ON DELETE CASCADE,
        body text NOT NULL,
        date bigint,
        answerer_name text NOT NULL,
        answerer_email text NOT NULL,
        helpfulness integer DEFAULT 0,
        reported boolean DEFAULT FALSE
      );

      CREATE TABLE IF NOT EXISTS answers_photos(
        id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        answer_id integer  NOT NULL REFERENCES answers ON DELETE CASCADE,
        url text NOT NULL
      );
    `);
    console.log('Tables questions, answers, and answers_photos created.');

    await Promise.all([
      await pool.query(`
        COPY questions (id, product_id, body, date, name, email, reported, helpfulness)
          FROM $1
          WITH CSV HEADER;
      `, [`${process.env.DBPATH}/questions.csv`]),
      await pool.query(`
        COPY answers (id, question_id, body, date, name, email, reported, helpfulness)
          FROM $1
          WITH CSV HEADER;
      `, [`${process.env.DBPATH}/answers.csv`]),
      await pool.query(`
        COPY answers_photos (id, answer_id, url)
          FROM $1
          WITH CSV HEADER;
      `, [`${process.env.DBPATH}/answers_photos.csv`]),
    ]);
    console.log('Tables questions, answers, and answers_photos populated.');

    await pool.query(`
      ALTER TABLE questions
        ADD CONSTRAINT body_length CHECK (length(body) <= 1e4),
        ADD CONSTRAINT name_length CHECK (length(name) <= 1e2),
        ADD CONSTRAINT email_length CHECK (length(name) <= 1e2),
        ALTER COLUMN date TYPE timestamp(3)
          USING to_timestamp(date / 1000.0),
        ALTER COLUMN date SET DEFAULT LOCALTIMESTAMP(3);

      ALTER TABLE answers
        ADD CONSTRAINT body_length CHECK (length(body) <= 1e4),
        ADD CONSTRAINT name_length CHECK (length(name) <= 1e2),
        ADD CONSTRAINT email_length CHECK (length(name) <= 1e2),
        ALTER COLUMN date TYPE timestamp(3)
          USING to_timestamp(date / 1000.0),
        ALTER COLUMN date SET DEFAULT LOCALTIMESTAMP(3);

      CREATE INDEX questions_product_id_index ON questions (product_id);
      CREATE INDEX questions_date_index ON questions (question_date DESC);
      CREATE INDEX answers_question_id_index ON answers (question_id);
      CREATE INDEX answers_date_index ON answers (date DESC);
      CREATE INDEX answers_photos_answer_id_index ON answers_photos (answer_id);
      `);
    console.log(`Constraints placed on tables questions and answers.
      Columns questions.date and answers.date converted to type timestamp.
      Indexes created on ids and dates.
    `);
  } catch (error) {
    console.log(`Failed to create database ${process.env.PGDATABASE}:`, error);
  }
};
