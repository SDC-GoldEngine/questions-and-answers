const { Pool, Client } = require('pg');

module.exports = async () => {
  const client = new Client({
    database: 'template1',
  });

  try {
    await client.connect();
    await client.query(`DROP DATABASE IF EXISTS ${process.env.PGDATABASE};`)
    await client.query(`CREATE DATABASE ${process.env.PGDATABASE};`)
    await client.end()
    console.log(`Database ${process.env.PGDATABASE} created.`)

    const pool = new Pool()

    await pool.query(`
      CREATE TABLE IF NOT EXISTS questions(
        id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        product_id integer NOT NULL,
        body text NOT NULL,
        date bigint,
        name text NOT NULL,
        email text NOT NULL,
        helpfulness integer DEFAULT 0,
        reported boolean DEFAULT FALSE
      );

      CREATE TABLE IF NOT EXISTS answers(
        id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        question_id integer NOT NULL REFERENCES questions ON DELETE CASCADE,
        body text NOT NULL,
        date bigint,
        name text NOT NULL,
        email text NOT NULL,
        helpfulness integer DEFAULT 0,
        reported boolean DEFAULT FALSE
      );

      CREATE TABLE IF NOT EXISTS answers_photos(
        id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        answer_id integer  NOT NULL REFERENCES answers ON DELETE CASCADE,
        url text NOT NULL
      );
    `);
    console.log('Tables questions, answers, and answers_photos created.');

    await Promise.all([
      await pool.query(`
        COPY questions (id, product_id, body, date, name, email, reported, helpfulness)
          FROM '/Users/shannon/Downloads/questions.csv'
          WITH CSV HEADER;
      `),
      await pool.query(`
        COPY answers (id, question_id, body, date, name, email, reported, helpfulness)
          FROM '/Users/shannon/Downloads/answers.csv'
          WITH CSV HEADER;

      `),
      await pool.query(`
        COPY answers_photos (id, answer_id, url)
          FROM '/Users/shannon/Downloads/answers_photos.csv'
          WITH CSV HEADER;
     `)
    ]);
    console.log('Tables questions, answers, and answers_photos populated.');

    await pool.query(`
      ALTER TABLE questions
        ADD CONSTRAINT body_length CHECK (length(body) <= 1e4),
        ADD CONSTRAINT name_length CHECK (length(name) <= 1e2),
        ADD CONSTRAINT email_length CHECK (length(name) <= 1e2),
        ALTER COLUMN date TYPE timestamp(3)
          USING to_timestamp(date / 1000.0),
        ALTER COLUMN date SET DEFAULT LOCALTIMESTAMP(3);

      ALTER TABLE answers
        ADD CONSTRAINT body_length CHECK (length(body) <= 1e4),
        ADD CONSTRAINT name_length CHECK (length(name) <= 1e2),
        ADD CONSTRAINT email_length CHECK (length(name) <= 1e2),
        ALTER COLUMN date TYPE timestamp(3)
          USING to_timestamp(date / 1000.0),
        ALTER COLUMN date SET DEFAULT LOCALTIMESTAMP(3);
      `);
    console.log('Constraints placed on tables questions and answers. Columns questions.date and answers.date converted to type timestamp.');
  } catch (error) {
    console.log(`Failed to create database ${process.env.PGDATABASE}:`, error);
  }
};
